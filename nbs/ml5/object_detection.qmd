---
title: "Detección de objetos"
description: "Este es un modelo pre-entrenado que detecta objetos desde una imagen o un video incluyendo videos en vivo como los una webcam."
format: html
---

Este modelo utiliza COCO-SSD (Common Objects in Context - Single Shot Detection) para identificar y localizar objetos en tiempo real. El modelo puede detectar 80 clases diferentes de objetos comunes como personas, animales, vehículos, muebles y más.

**Instrucciones:**

- 1. Haz clic en el botón "Iniciar Detección de Objetos"

- 2. Permite el acceso a tu cámara web cuando se te solicite

- 3. El modelo detectará y marcará automáticamente los objetos

::: {.callout-note}
Para mejores resultados, asegúrate de tener buena iluminación y objetos claramente visibles frente a la cámara.
:::

<div id="button-container" style="text-align: center; margin: 20px 0;">
  <button id="start-button" style="padding: 12px 24px; font-size: 16px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;">
    Iniciar Detección de Objetos
  </button>
  <button id="stop-button" style="display: none; padding: 12px 24px; font-size: 16px; background-color: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer;">
    Detener Detección
  </button>
  <p id="status-message" style="margin-top: 10px; font-style: italic; color: #666;"></p>
</div>

<div id="p5-sketch" style="display: none; text-align: center;">
  <div id="canvas-container" style="display: inline-block;"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/p5@1.11.7/lib/p5.js"></script>
<script src="https://unpkg.com/ml5@0.12.2/dist/ml5.min.js"></script>

<script>
// Wait for ml5 to be fully loaded
window.addEventListener('load', function() {
    // Extra check to ensure ml5 is available
    if (typeof ml5 === 'undefined') {
        console.error('ml5 is not loaded');
        return;
    }

    const startButton = document.getElementById('start-button');
    const stopButton = document.getElementById('stop-button');
    const statusMessage = document.getElementById('status-message');
    const sketchContainer = document.getElementById('p5-sketch');
    let sketchStarted = false;
    let p5Instance = null;
    let videoStream = null;

    startButton.addEventListener('click', function() {
        if (sketchStarted) return;
        
        sketchStarted = true;
        startButton.style.display = 'none';
        stopButton.style.display = 'inline-block';
        statusMessage.textContent = 'Cargando modelo...';
        
        // Show the canvas container
        sketchContainer.style.display = 'block';

        const sketch = (p) => {
            let video;
            let detector;
            let detections = [];

            p.setup = function() {
                p.createCanvas(640, 480);

                // Using webcam feed as video input, hiding html element to avoid duplicate with canvas
                video = p.createCapture(p.VIDEO, videoReady);
                video.size(p.width, p.height);
                video.hide();
                videoStream = video;
            }

            function videoReady() {
                console.log("Video Ready!");
                statusMessage.textContent = 'Video listo, cargando modelo...';
                // Create detector AFTER video is ready
                detector = ml5.objectDetector('cocossd', modelReady);
            }

            function modelReady() {
                console.log("Model Ready!");
                statusMessage.textContent = '¡Modelo cargado! Mostrando detección...';
                statusMessage.style.color = '#4CAF50';
                detect();
            }

            function detect() {
                detector.detect(video, gotDetections);
            }

            // Callback function is called each time the object detector finishes processing a frame.
            function gotDetections(error, results) {
                if (error) {
                    console.error(error);
                    return;
                }
                // Update detections array with the new results
                detections = results;
                // Call detect again for continuous detection
                detect();
            }

            p.draw = function() {
                // Draw the current video frame onto the canvas.
                p.image(video, 0, 0);

                for (let i = 0; i < detections.length; i += 1) {
                    let detection = detections[i];

                    // Draw bounding box
                    p.stroke(0, 255, 0);
                    p.strokeWeight(4);
                    p.noFill();
                    p.rect(
                        detection.x,
                        detection.y,
                        detection.width,
                        detection.height
                    );

                    // Draw label
                    p.noStroke();
                    p.fill(255);
                    p.textSize(24);
                    p.text(detection.label, detection.x + 10, detection.y + 24);
                }
            }
        };
        p5Instance = new p5(sketch, 'canvas-container');
    });

    stopButton.addEventListener('click', function() {
        // Stop the video stream
        if (videoStream) {
            videoStream.remove();
            videoStream = null;
        }
        
        // Remove the p5 instance
        if (p5Instance) {
            p5Instance.remove();
            p5Instance = null;
        }
        
        // Hide canvas and reset UI
        sketchContainer.style.display = 'none';
        stopButton.style.display = 'none';
        startButton.style.display = 'inline-block';
        statusMessage.textContent = '';
        sketchStarted = false;
    });
});

</script>

## Explicación del Código

### Código Completo

```javascript
let video;
let detector;
let detections = [];

function setup() {
    createCanvas(640, 480);
    
    // Using webcam feed as video input
    video = createCapture(VIDEO, videoReady);
    video.size(width, height);
    video.hide();
}

function videoReady() {
    console.log("Video Ready!");
    // Create detector AFTER video is ready
    detector = ml5.objectDetector('cocossd', modelReady);
}

function modelReady() {
    console.log("Model Ready!");
    detect();
}

function detect() {
    detector.detect(video, gotDetections);
}

function gotDetections(error, results) {
    if (error) {
        console.error(error);
        return;
    }
    // Update detections array with the new results
    detections = results;
    // Call detect again for continuous detection
    detect();
}

function draw() {
    // Draw the current video frame onto the canvas
    image(video, 0, 0);
    
    for (let i = 0; i < detections.length; i++) {
        let detection = detections[i];
        
        // Draw bounding box
        stroke(0, 255, 0);
        strokeWeight(4);
        noFill();
        rect(detection.x, detection.y, detection.width, detection.height);
        
        // Draw label
        noStroke();
        fill(255);
        textSize(24);
        text(detection.label, detection.x + 10, detection.y + 24);
    }
}
```

### 1. Declaración de Variables

Primero, declaramos las variables que necesitaremos durante todo el proceso:

```javascript
let video;
let detector;
let detections = [];
```

- `video`: Almacenará la captura de la cámara web
- `detector`: Contendrá el modelo COCO-SSD de ml5.js
- `detections`: Array que guardará los objetos detectados en cada frame

### 2. Configuración Inicial (setup)

La función `setup()` se ejecuta una vez al inicio y configura el canvas y la cámara:

```javascript
function setup() {
    createCanvas(640, 480);
    video = createCapture(VIDEO, videoReady);
    video.size(width, height);
    video.hide();
}
```

- `createCanvas(640, 480)`: Crea un lienzo de 640x480 píxeles para mostrar el video
- `createCapture(VIDEO, videoReady)`: Captura el video de la webcam y llama a `videoReady` cuando esté listo
- `video.hide()`: Oculta el elemento HTML del video (solo mostramos el canvas)

### 3. Carga del Modelo (videoReady)

Esta función se ejecuta cuando el video está listo, garantizando que el detector tenga video para analizar:

```javascript
function videoReady() {
    detector = ml5.objectDetector('cocossd', modelReady);
}
```

- `ml5.objectDetector('cocossd', modelReady)`: Carga el modelo COCO-SSD pre-entrenado
- Se llama solo después de que el video esté disponible para evitar errores
- Cuando el modelo carga, llama automáticamente a `modelReady()`

### 4. Inicio de Detección (modelReady y detect)

Estas funciones inician el ciclo de detección continua:

```javascript
function modelReady() {
    detect();
}

function detect() {
    detector.detect(video, gotDetections);
}
```

- `detect()`: Función que inicia una detección en el frame actual del video
- `detector.detect(video, gotDetections)`: Analiza el video y llama a `gotDetections` con los resultados

### 5. Procesamiento de Resultados (gotDetections)

Esta función recibe los objetos detectados y mantiene la detección continua:

```javascript
function gotDetections(error, results) {
    if (error) {
        console.error(error);
        return;
    }
    detections = results;
    detect();
}
```

- `error`: Contiene información si algo salió mal
- `results`: Array con todos los objetos detectados en el frame
- `detections = results`: Actualiza el array de detecciones
- `detect()`: Llama recursivamente para detección continua

### 6. Visualización (draw)

La función `draw()` se ejecuta continuamente y dibuja el video con las detecciones:

```javascript
function draw() {
    image(video, 0, 0);
    
    for (let i = 0; i < detections.length; i++) {
        let detection = detections[i];
        
        // Draw bounding box
        stroke(0, 255, 0);
        strokeWeight(4);
        noFill();
        rect(detection.x, detection.y, detection.width, detection.height);
        
        // Draw label
        noStroke();
        fill(255);
        textSize(24);
        text(detection.label, detection.x + 10, detection.y + 24);
    }
}
```

- `image(video, 0, 0)`: Dibuja el frame actual del video en el canvas
- `rect()`: Dibuja un rectángulo verde alrededor de cada objeto detectado
- `text()`: Muestra la etiqueta del objeto (ej: "person", "car", "dog")
- `detection.x, detection.y, detection.width, detection.height`: Coordenadas del objeto

</script>