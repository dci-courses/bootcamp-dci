---
title: "Clasificador de Imágenes"
description: "Este es un modelo pre-entrenado que clasifica imágenes usando MobileNet para identificar objetos y escenas."
format: html
---

Este modelo utiliza MobileNet, una red neuronal convolucional entrenada para clasificar imágenes en más de 1000 categorías diferentes. El clasificador puede identificar objetos comunes, animales, vehículos, alimentos y mucho más.

**Instrucciones:**

- 1. Haz clic en el botón "Iniciar Clasificador de Imágenes"

- 2. El modelo cargará y clasificará automáticamente la imagen de ejemplo

- 3. Verás la etiqueta y el porcentaje de confianza en la parte inferior

::: {.callout-note}
Este ejemplo usa una imagen predefinida. El modelo puede clasificar cualquier imagen en una de las 1000+ categorías que conoce.
:::

<div id="button-container" style="text-align: center; margin: 20px 0;">
  <button id="start-button" style="padding: 12px 24px; font-size: 16px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;">
    Iniciar Clasificador de Imágenes
  </button>
  <button id="stop-button" style="display: none; padding: 12px 24px; font-size: 16px; background-color: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer;">
    Cerrar Clasificador
  </button>
  <p id="status-message" style="margin-top: 10px; font-style: italic; color: #666;"></p>
</div>

<div id="p5-sketch" style="display: none; text-align: center;">
  <div id="canvas-container" style="display: inline-block;"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/p5@1.11.7/lib/p5.js"></script>
<script src="https://unpkg.com/ml5@0.12.2/dist/ml5.min.js"></script>

<script>
// Wait for ml5 to be fully loaded
window.addEventListener('load', function() {
    // Extra check to ensure ml5 is available
    if (typeof ml5 === 'undefined') {
        console.error('ml5 is not loaded');
        return;
    }

    const startButton = document.getElementById('start-button');
    const stopButton = document.getElementById('stop-button');
    const statusMessage = document.getElementById('status-message');
    const sketchContainer = document.getElementById('p5-sketch');
    let sketchStarted = false;
    let p5Instance = null;

    startButton.addEventListener('click', function() {
        if (sketchStarted) return;
        
        sketchStarted = true;
        startButton.style.display = 'none';
        stopButton.style.display = 'inline-block';
        statusMessage.textContent = 'Cargando modelo...';
        
        // Show the canvas container
        sketchContainer.style.display = 'block';

        const sketch = (p) => {
            // Initialize the Image Classifier method with MobileNet
            let classifier;

            // A variable to hold the image we want to classify
            let img;

            // Variables for displaying the results on the canvas
            let label = "";
            let confidence = "";

            // Array of available images
            const images = [
                "../data/images/image_classification/cheetah.png",
                "../data/images/image_classification/flamingo.png",
                "../data/images/image_classification/lion.png",
                "../data/images/image_classification/panda.png"
            ];

            p.preload = function() {
                classifier = ml5.imageClassifier("MobileNet");
                // Randomly select one image
                const randomImage = images[Math.floor(Math.random() * images.length)];
                img = p.loadImage(randomImage);
            }

            p.setup = function() {
                p.createCanvas(400, 400);
                statusMessage.textContent = 'Clasificando imagen...';
                statusMessage.style.color = '#4CAF50';
                
                // Display the image
                p.image(img, 0, 0, p.width, p.height);
                
                // Classify the image
                classifier.classify(img, gotResult);
            }

            // Callback function for when classification has finished
            function gotResult(error, results) {
                if (error) {
                    console.error(error);
                    statusMessage.textContent = 'Error al clasificar la imagen';
                    statusMessage.style.color = '#f44336';
                    return;
                }
                
                // The results are in an array ordered by confidence
                console.log(results);

                // Display the results on the canvas
                p.fill(255);
                p.stroke(0);
                p.strokeWeight(2);
                p.textSize(18);
                label = "Etiqueta: " + results[0].label;
                confidence = "Confianza: " + p.nf(results[0].confidence, 0, 2);
                p.text(label, 10, 360);
                p.text(confidence, 10, 380);
                
                statusMessage.textContent = '¡Clasificación completada!';
            }
        }; 
        p5Instance = new p5(sketch, 'canvas-container');
    });

    stopButton.addEventListener('click', function() {
        // Remove the p5 instance
        if (p5Instance) {
            p5Instance.remove();
            p5Instance = null;
        }
        
        // Hide canvas and reset UI
        sketchContainer.style.display = 'none';
        stopButton.style.display = 'none';
        startButton.style.display = 'inline-block';
        statusMessage.textContent = '';
        sketchStarted = false;
    });
});
</script>


## Explicación del Código

### Código Completo

```javascript
// Initialize the Image Classifier method with MobileNet
let classifier;

// A variable to hold the image we want to classify
let img;

// Variables for displaying the results on the canvas
let label = "";
let confidence = "";

// Array of available images
const images = [
    "../data/images/image_classification/cheetah.png",
    "../data/images/image_classification/flamingo.png",
    "../data/images/image_classification/lion.png",
    "../data/images/image_classification/panda.png"
];

function preload() {
    classifier = ml5.imageClassifier("MobileNet");
    // Randomly select one image
    const randomImage = images[Math.floor(Math.random() * images.length)];
    img = loadImage(randomImage);
}

function setup() {
    createCanvas(400, 400);
    
    // Display the image
    image(img, 0, 0, width, height);
    
    // Classify the image
    classifier.classify(img, gotResult);
}

// Callback function for when classification has finished
function gotResult(error, results) {
    if (error) {
        console.error(error);
        return;
    }
    
    // The results are in an array ordered by confidence
    console.log(results);

    // Display the results on the canvas
    fill(255);
    stroke(0);
    strokeWeight(2);
    textSize(18);
    label = "Etiqueta: " + results[0].label;
    confidence = "Confianza: " + nf(results[0].confidence, 0, 2);
    text(label, 10, 360);
    text(confidence, 10, 380);
}
```

### 1. Declaración de Variables

Primero, declaramos las variables que necesitaremos durante todo el proceso:

```javascript
let classifier;
let img;
let label = "";
let confidence = "";
```

- `classifier`: Almacenará el modelo MobileNet de ml5.js
- `img`: Guardará la imagen que queremos clasificar
- `label` y `confidence`: Contendrán los resultados de la clasificación

### 2. Array de Imágenes Disponibles

Definimos un array con las rutas de las imágenes que queremos clasificar:

```javascript
const images = [
    "../data/images/image_classification/cheetah.png",
    "../data/images/image_classification/flamingo.png",
    "../data/images/image_classification/lion.png",
    "../data/images/image_classification/panda.png"
];
```

### 3. Carga del Modelo y la Imagen (preload)

La función `preload()` se ejecuta antes de `setup()` y es ideal para cargar recursos:

```javascript
function preload() {
    classifier = ml5.imageClassifier("MobileNet");
    const randomImage = images[Math.floor(Math.random() * images.length)];
    img = loadImage(randomImage);
}
```

- `ml5.imageClassifier("MobileNet")`: Carga el modelo pre-entrenado MobileNet
- `Math.floor(Math.random() * images.length)`: Selecciona un índice aleatorio del array
- `loadImage()`: Carga la imagen seleccionada

### 4. Configuración Inicial (setup)

La función `setup()` se ejecuta una vez al inicio:

```javascript
function setup() {
    createCanvas(400, 400);
    image(img, 0, 0, width, height);
    classifier.classify(img, gotResult);
}
```

- `createCanvas(400, 400)`: Crea un lienzo de 400x400 píxeles
- `image(img, 0, 0, width, height)`: Dibuja la imagen en el canvas
- `classifier.classify(img, gotResult)`: Inicia la clasificación y llama a `gotResult` cuando termine

### 5. Procesamiento de Resultados

La función `gotResult` es un callback que recibe los resultados de la clasificación:

```javascript
function gotResult(error, results) {
    if (error) {
        console.error(error);
        return;
    }
    
    console.log(results);
    
    fill(255);
    stroke(0);
    strokeWeight(2);
    textSize(18);
    label = "Etiqueta: " + results[0].label;
    confidence = "Confianza: " + nf(results[0].confidence, 0, 2);
    text(label, 10, 360);
    text(confidence, 10, 380);
}
```

- `error`: Contiene información si algo salió mal
- `results`: Array ordenado por confianza, donde `results[0]` es la predicción más probable
- `results[0].label`: La etiqueta de la clasificación (ej: "panda")
- `results[0].confidence`: Nivel de confianza entre 0 y 1
- `nf()`: Formatea el número con 2 decimales
  